name: CI/CD Pipeline

on:
  push:
    branches: [ main, v1.1, v2.0 ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_REGISTRY: docker.io
  DOCKER_REPOSITORY: your-dockerhub/product-service

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4  # Updated from v3 to v4
    
    - name: Set up JDK 17  # Changed from JDK 11 to 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'  # Matches pom.xml
        distribution: 'temurin'
        cache: 'maven'  # Added caching
    
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
    
    - name: Run tests
      run: mvn clean test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4  # Updated to v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3  # Updated to v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3  # Updated to v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Extract tag name
      id: extract_tag
      run: echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5  # Updated to v5
      with:
        context: .
        push: true
        tags: ${{ env.DOCKER_REPOSITORY }}:${{ steps.extract_tag.outputs.TAG }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4  # Updated to v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Deploy to Kubernetes
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        kubectl apply -f k8s/$VERSION-deployment.yaml
        kubectl apply -f k8s/ingress.yaml
        kubectl apply -f k8s/hpa.yaml
      env:
        KUBECONFIG: ${{ secrets.KUBECONFIG }}  # Add cluster config secret